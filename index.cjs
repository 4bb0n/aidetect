//basic socket.io server
const express = require('express');
const http = require('http');
const socketio = require('socket.io');
require('dotenv').config(); // <-- Load environment variables
const { GoogleGenerativeAI } = require("@google/generative-ai"); // <-- Import Google AI SDK

const app = express();
const server = http.createServer(app);
const io = socketio(server);
const port = process.env.PORT || 3000;

// --- Google AI Setup ---
const API_KEY = process.env.GOOGLE_API_KEY; // <-- Get API key from .env
if (!API_KEY) {
    console.error("CRITICAL ERROR: GOOGLE_API_KEY is not set in your .env file or environment variables.");
    process.exit(1); // Exit if API key is missing
}
const genAI = new GoogleGenerativeAI(API_KEY);
const aiModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); // Or "gemini-1.5-flash-latest" etc.
// --- End Google AI Setup ---

let users = [];
let writings = {};

app.use(express.static(__dirname + '/public'));

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});
app.get('/secret', (req, res) => {
    res.sendFile(__dirname + '/admin.html');
});

// --- Google AI Analysis Function ---
async function analyzeTextForAIGeneration(textToAnalyze) {
    if (!textToAnalyze || textToAnalyze.trim() === "") {
        return { error: "No text provided for analysis." };
    }
    try {
        const prompt = `
            You are a highly specialized AI Writing Detector. Your task is to assess the likelihood that the following text was generated by an AI, particularly a large language model like ChatGPT.

            Provide your analysis in the following JSON format:
            {
              "aiLikelihoodPercentage": <integer_percentage_from_0_to_100>,
              "justification": "<brief_justification_for_your_assessment>",
              "confidence": "<High|Medium|Low - your confidence in this assessment>"
            }

            Focus on these aspects in your justification:
            - Clarity and Structure: Is it overly perfect, logically flawless, or too textbook-like?
            - Tone: Is it neutral, objective, lacking personal voice or colloquialisms?
            - Vocabulary: Is it precise, using standard terminology, or perhaps slightly generic?
            - Nuance: Does it lack subtle human insights, counterarguments, or personal reflections?
            - Common AI Patterns: Does it exhibit patterns like overly helpful introductions/conclusions, listicles without strong rationale, or a very balanced but unopinionated view?

            Remember to triple check to avoid false positives.

            Text to analyze:
            ---
            ${textToAnalyze}
            ---
        `;

        console.log("Sending prompt to Google AI for analysis...");
        const result = await aiModel.generateContent(prompt);
        const response = await result.response;
        const rawAnalysisText = response.text();
        console.log("Raw AI Analysis:", rawAnalysisText);

        // Attempt to parse the JSON
        try {
            // Clean the response to make it valid JSON
            // LLMs sometimes add ```json ... ``` or other markdown
            let cleanedText = rawAnalysisText.replace(/^```json\s*|```\s*$/g, '').trim();
            const analysisJson = JSON.parse(cleanedText);
            return analysisJson;
        } catch (parseError) {
            console.error("Error parsing AI response as JSON:", parseError);
            console.error("Raw AI response that failed to parse:", rawAnalysisText);
            return {
                error: "AI analysis received, but could not be parsed.",
                rawResponse: rawAnalysisText // Send the raw response for debugging
            };
        }

    } catch (error) {
        console.error("Error analyzing text with Google AI:", error);
        let errorMessage = "Could not get analysis from AI.";
        if (error.response && error.response.promptFeedback && error.response.promptFeedback.blockReason) {
            errorMessage += ` Blocked due to: ${error.response.promptFeedback.blockReason}`;
             if (error.response.promptFeedback.safetyRatings) {
                errorMessage += ` Safety Ratings: ${JSON.stringify(error.response.promptFeedback.safetyRatings)}`;
            }
        }
        return { error: errorMessage };
    }
}
// --- End Google AI Analysis Function ---


io.on('connection', (socket) => {
    console.log('a user connected:', socket.id);

    socket.on('userjoin', (username) => {
        if (users.some(user => user.username === username)) {
            console.log(`Username ${username} already taken`);
            socket.emit('usernameTaken', username);
            return;
        }
        console.log(`User ${username} joined with id ${socket.id}`);
        users.push({ id: socket.id, username: username });
        writings[username] = "";
        io.emit("userList", users); // Emit to all including the new user
    });

    socket.on("teacher_connected", () => {
        console.log(`Teacher connected: ${socket.id}`);
        socket.emit("userList", users);
        socket.emit("allWritingsEvent", writings); // Send current writings to teacher
    });

    socket.on('get_writing', user => {
        console.log(`Teacher requested writing for ${user}`);
        socket.emit('writingEvent', writings[user] || "", user); // Send empty string if no writing
    });

    socket.on('editedWriting', (user, content) => {
        if (writings.hasOwnProperty(user)) {
            writings[user] = content;
            // console.log(`Writing updated for ${user}`);
            // Optionally, you might want to broadcast this to the teacher in real-time
            // io.to(TEACHER_SOCKET_ID_IF_KNOWN).emit('specificUserWritingUpdate', user, content);
        }
    });

    socket.on('pasteDetected', (user, pasteContent) => {
        console.log(`User ${user} pasted content.`);
        // Decide if you want to broadcast the full paste content or just the event
        socket.broadcast.emit('pasteEvent', user, pasteContent.substring(0, 100) + "..."); // Send to others (e.g., teacher)
    });

    socket.on('disconnect', () => {
        const leftUserObj = users.find(user => user.id === socket.id);
        if (leftUserObj) {
            const leftUsername = leftUserObj.username;
            console.log(`User ${leftUsername} disconnected: ${socket.id}`);
            io.emit("userLeft", leftUsername); // Notify all clients
            delete writings[leftUsername];
            users = users.filter(user => user.id !== socket.id);
            io.emit("userList", users); // Update user list for all
        } else {
            console.log('A user disconnected (no username associated):', socket.id);
        }
    });

    socket.on("get_all_writings", () => {
        socket.emit("allWritingsEvent", writings);
    });

    socket.on("emojiDetected", (user, emoji) => {
        console.log(`Emoji ${emoji} detected for user ${user}`);
        socket.broadcast.emit("emojiEvent", user, emoji);
    });

    // --- New Socket Event for AI Analysis ---
    socket.on('request_ai_analysis', async (usernameToAnalyze) => {
        console.log(`Received request for AI analysis for user: ${usernameToAnalyze}`);
        const teacherSocketId = socket.id; // Assuming the request comes from the teacher

        if (writings.hasOwnProperty(usernameToAnalyze)) {
            const text = writings[usernameToAnalyze];
            if (text && text.trim().length > 10) { // Add a minimum length check
                const analysisResult = await analyzeTextForAIGeneration(text);
                console.log(`Analysis for ${usernameToAnalyze}:`, analysisResult);
                // Send result back ONLY to the teacher who requested it
                io.to(teacherSocketId).emit('ai_analysis_result', {
                    username: usernameToAnalyze,
                    result: analysisResult
                });
            } else {
                io.to(teacherSocketId).emit('ai_analysis_result', {
                    username: usernameToAnalyze,
                    result: { error: "Not enough text to analyze or no writing found." }
                });
            }
        } else {
            io.to(teacherSocketId).emit('ai_analysis_result', {
                username: usernameToAnalyze,
                result: { error: `No writing found for user: ${usernameToAnalyze}` }
            });
        }
    });
    // --- End New Socket Event ---
});

server.listen(port, () => {
    console.log('listening on *:' + port);
    if (!API_KEY) {
        console.warn("Warning: GOOGLE_API_KEY is not set. AI features will not work.");
    } else {
        console.log("Google AI SDK initialized.");
    }
});
